@page "/fetchasync"
@using AppKi.Shared
@using Grpc.Core
@inject IWeatherService Service

<h3>FetchAsync</h3>

@if (_forecasts is null)
{
    <p>Loading...</p>
}

@if (_forecasts is not null)
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Summary</th>
            <th>Description</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in _forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.Summary</td>
                <td>@forecast.Description</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {

    private List<WeatherForecast> _forecasts = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
        using var source = new CancellationTokenSource(TimeSpan.FromSeconds(10));
        try
        {
            await foreach (var item in Service.GetWeatherStream(source.Token).WithCancellation(source.Token))
            {
                _forecasts.Add(item);
                StateHasChanged(); 
            }
        }
        catch (RpcException e)
        {
            if (e.StatusCode == StatusCode.Cancelled)
                return;
            throw;
        }
    }

}